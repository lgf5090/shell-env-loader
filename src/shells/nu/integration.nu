# Nushell Integration Script
# ==========================
# Integration code for adding the environment loader to Nushell configuration

# Integration code template for config.nu
let nushell_integration_code = '
# Cross-Shell Environment Loader (Nushell)
# =========================================
# Automatically load environment variables from .env files
# Generated by shell-env-loader installation

let env_loader_path = ($env.HOME | path join ".local" "share" "env-loader" "nu" "loader.nu")
if ($env_loader_path | path exists) {
    # Source the loader module
    source $env_loader_path
    
    # Optional: Enable debug mode by uncommenting the next line
    # $env.ENV_LOADER_DEBUG = "true"
    
    # Load environment variables from default hierarchy
    # env load ".env"
}
'

# Function to get Nushell configuration file path
def get_nushell_config_file [] {
    let config_dir = if ($env.XDG_CONFIG_HOME? | default "") != "" {
        $env.XDG_CONFIG_HOME | path join "nushell"
    } else {
        $env.HOME | path join ".config" "nushell"
    }
    
    let config_file = ($config_dir | path join "config.nu")
    return $config_file
}

# Function to check if integration is already installed
def is_integration_installed [config_file: string] {
    if ($config_file | path exists) {
        let content = (open $config_file)
        return ($content | str contains "Cross-Shell Environment Loader (Nushell)")
    } else {
        return false
    }
}

# Function to install Nushell integration
def install_nushell_integration [] {
    let config_file = (get_nushell_config_file)
    let config_dir = ($config_file | path dirname)
    
    print "Installing Nushell integration..."
    print $"Configuration file: ($config_file)"
    
    # Check if already installed
    if (is_integration_installed $config_file) {
        print $"Integration already installed in ($config_file)"
        return
    }
    
    # Create config directory if it doesn't exist
    if not ($config_dir | path exists) {
        mkdir $config_dir
        print $"Created config directory: ($config_dir)"
    }
    
    # Create backup if file exists
    if ($config_file | path exists) {
        let timestamp = (date now | format date "%Y%m%d_%H%M%S")
        let backup_file = $"($config_file).env-loader-backup.($timestamp)"
        cp $config_file $backup_file
        print $"Created backup: ($backup_file)"
    }
    
    # Add integration code
    $nushell_integration_code | save --append $config_file
    
    print "✅ Nushell integration installed successfully"
    print $"   Configuration file: ($config_file)"
    print $"   To activate: source ($config_file)"
    print "   Or start a new Nushell session"
}

# Function to uninstall Nushell integration
def uninstall_nushell_integration [] {
    let config_file = (get_nushell_config_file)
    
    print "Uninstalling Nushell integration..."
    
    if not (is_integration_installed $config_file) {
        print $"Integration not found in ($config_file)"
        return
    }
    
    # Read current content and remove integration block
    let content = (open $config_file)
    let lines = ($content | lines)
    
    mut new_lines = []
    mut skip_block = false
    
    for line in $lines {
        if ($line | str contains "Cross-Shell Environment Loader (Nushell)") {
            $skip_block = true
        } else if $skip_block and ($line | str trim | str length) == 0 {
            $skip_block = false
        } else if not $skip_block {
            $new_lines = ($new_lines | append $line)
        }
    }
    
    # Write back to file
    $new_lines | str join "\n" | save --force $config_file
    
    print "✅ Nushell integration uninstalled successfully"
}

# Function to verify Nushell integration
def verify_nushell_integration [] {
    let config_file = (get_nushell_config_file)
    let loader_path = ($env.HOME | path join ".local" "share" "env-loader" "nu" "loader.nu")
    
    print "Verifying Nushell integration..."
    print $"Configuration file: ($config_file)"
    print $"Loader script: ($loader_path)"
    
    # Check if integration is installed
    if not (is_integration_installed $config_file) {
        print "❌ Integration not found in configuration file"
        return false
    }
    
    # Check if loader script exists
    if not ($loader_path | path exists) {
        print $"❌ Loader script not found: ($loader_path)"
        return false
    }
    
    # Test loading the script (using nu command since source requires compile-time constant)
    try {
        nu --no-config-file --commands $"source \"($loader_path)\"; print \"Script loaded successfully\""
        print "✅ Loader script loads without errors"
    } catch {
        print "❌ Loader script has errors"
        return false
    }
    
    print "✅ Nushell integration verification passed"
    return true
}

# Function to show integration status
def show_integration_status [] {
    let config_file = (get_nushell_config_file)
    let loader_path = ($env.HOME | path join ".local" "share" "env-loader" "nu" "loader.nu")
    
    print "Nushell Integration Status"
    print "=========================="
    print $"Configuration file: ($config_file)"
    print $"Configuration file exists: ($config_file | path exists)"
    print $"Integration installed: (is_integration_installed $config_file)"
    print $"Loader script: ($loader_path)"
    print $"Loader script exists: ($loader_path | path exists)"
    
    if ($config_file | path exists) {
        let size = (ls $config_file | get size | first)
        print $"Configuration file size: ($size) bytes"
    }
    
    if ($loader_path | path exists) {
        let size = (ls $loader_path | get size | first)
        print $"Loader script size: ($size) bytes"
    }
}

# Function to test integration in a new Nushell session
def test_integration_in_new_session [] {
    let config_file = (get_nushell_config_file)
    
    print "Testing Nushell integration in new session..."
    
    # Test in a new Nushell session
    let test_script = $'
        if ("($config_file)" | path exists) {
            source "($config_file)"
            if (which "env load" | length) > 0 {
                print "✅ Integration test passed - functions are available"
                env platform
                env shell
            } else {
                print "❌ Integration test failed - functions not available"
                exit 1
            }
        } else {
            print "❌ Configuration file not found: ($config_file)"
            exit 1
        }
    '
    
    nu --no-config-file --commands $test_script
}

# Main function for command-line usage
def main [command?: string] {
    match ($command | default "help") {
        "install" => { install_nushell_integration }
        "uninstall" => { uninstall_nushell_integration }
        "verify" => { verify_nushell_integration }
        "status" => { show_integration_status }
        "test" => { test_integration_in_new_session }
        _ => {
            print "Usage: nu integration.nu [command]"
            print ""
            print "Commands:"
            print "  install   - Install Nushell integration"
            print "  uninstall - Remove Nushell integration"
            print "  verify    - Verify integration is working"
            print "  status    - Show integration status"
            print "  test      - Test integration in new session"
        }
    }
}

# Export functions for module usage
export def "integration install" [] {
    install_nushell_integration
}

export def "integration uninstall" [] {
    uninstall_nushell_integration
}

export def "integration verify" [] {
    verify_nushell_integration
}

export def "integration status" [] {
    show_integration_status
}

export def "integration test" [] {
    test_integration_in_new_session
}
