# Cross-Shell Environment Variable Configuration Example
# =====================================================
#
# This file demonstrates the hierarchical environment variable loading system
# that works across bash, zsh, fish, nushell, and PowerShell environments.
#
# HIERARCHICAL LOADING ORDER:
# 1. $HOME/.env (global user settings)
# 2. $HOME/.cfgs/.env (user configuration directory)
# 3. $PWD/.env (project-specific settings - highest priority)
#
# PRECEDENCE RULES (highest to lowest priority):
# 1. Shell-specific suffixes: _BASH, _ZSH, _FISH, _NU, _PS
# 2. Platform-specific suffixes: _UNIX, _LINUX, _MACOS, _WIN
# 3. Generic (no suffix)
#
# PLATFORM SUFFIXES:
# _UNIX   - All Unix-like systems (Linux, macOS, BSD)
# _LINUX  - Linux-specific
# _MACOS  - macOS-specific  
# _WIN    - Windows-specific
#
# SHELL SUFFIXES:
# _BASH   - Bash shell
# _ZSH    - Zsh shell
# _FISH   - Fish shell
# _NU     - Nushell
# _PS     - PowerShell
#
# SYNTAX REQUIREMENTS:
# - Use KEY=value format (no spaces around =)
# - Quote values containing spaces, special characters, or paths
# - Escape quotes within quoted values using backslashes
# - Use forward slashes for paths when possible (converted automatically)
# - Comments start with # and must be on separate lines

# =============================================================================
# BASIC ENVIRONMENT VARIABLES - Common settings for all environments
# =============================================================================

# Default editor preferences
EDITOR=vim
VISUAL=vim
PAGER=less

# Language and locale settings
# LANG=en_US.UTF-8
# LC_ALL=en_US.UTF-8

# Terminal settings
TERM=xterm-256color
COLORTERM=truecolor

# =============================================================================
# PLATFORM-SPECIFIC ENVIRONMENT VARIABLES
# =============================================================================

# Home directory paths (different conventions per platform)
USER_HOME=/home/$USER
USER_HOME_MACOS=/Users/$USER
USER_HOME_WIN=C:\\Users\\%USERNAME%

# Configuration directories
CONFIG_DIR=~/.config
CONFIG_DIR_UNIX=~/.config/unix
CONFIG_DIR_LINUX=~/.config/linux
CONFIG_DIR_WSL=~/.config/wsl
CONFIG_DIR_MACOS="~/Library/Application Support"
CONFIG_DIR_WIN=%APPDATA%

# Temporary directories
TEMP_DIR=/tmp
TEMP_DIR_WIN=%TEMP%
TEMP_DIR_MACOS=/tmp

# System paths
SYSTEM_BIN=/usr/local/bin
SYSTEM_BIN_WIN="C:\\Program Files"
SYSTEM_BIN_MACOS=/opt/homebrew/bin

# =============================================================================
# DEVELOPMENT ENVIRONMENT VARIABLES
# =============================================================================

# Programming language versions and paths
NODE_VERSION=18.17.0
PYTHON_VERSION=3.11.0
GO_VERSION=1.21.0

# Development directories
DEV_HOME=~/Development
PROJECTS_DIR=~/Projects
WORKSPACE_DIR=~/workspace

# Git configuration
GIT_EDITOR=vim
GIT_PAGER=less
GIT_DEFAULT_BRANCH=main

# =============================================================================
# PATH MANIPULATION - Adding directories to PATH
# =============================================================================

# Local binary directories
LOCAL_BIN=~/.local/bin
CARGO_BIN=~/.cargo/bin
GO_BIN=~/go/bin

# Platform-specific PATH additions
PATH_ADDITION_UNIX=/usr/local/bin:/opt/local/bin:/tmp/test_unix_path
PATH_ADDITION_LINUX=/usr/local/bin:/snap/bin:/tmp/test_linux_path
PATH_ADDITION_WSL="/mnt/c/Windows/System32:/mnt/c/Program Files/Git/bin"
PATH_ADDITION_MACOS=/opt/homebrew/bin:/usr/local/bin
PATH_ADDITION_WIN="C:\\Program Files\\Git\\bin;C:\\tools"

# Shell-specific PATH handling
PATH_EXPORT_BASH="$PATH:$LOCAL_BIN:$CARGO_BIN"
PATH_EXPORT_ZSH="$PATH:$LOCAL_BIN:$CARGO_BIN"
PATH_EXPORT_FISH="$PATH $LOCAL_BIN $CARGO_BIN"
PATH_EXPORT_PS="$env:PATH;$env:USERPROFILE\\.local\\bin"

# =============================================================================
# APPLICATION-SPECIFIC CONFIGURATIONS
# =============================================================================

# Docker settings
DOCKER_HOST=unix:///var/run/docker.sock
DOCKER_HOST_WIN=npipe:////./pipe/docker_engine
COMPOSE_PROJECT_NAME=myproject

# Database connections
DATABASE_URL=postgresql://localhost:5432/mydb
REDIS_URL=redis://localhost:6379
MONGODB_URL=mongodb://localhost:27017/mydb

# API keys and tokens (use placeholder values in examples)
API_KEY=your_api_key_here
JWT_SECRET=your_jwt_secret_here
GITHUB_TOKEN=ghp_your_github_token_here

# =============================================================================
# SPECIAL CHARACTER HANDLING - Paths and values with spaces, quotes, etc.
# =============================================================================

# Paths with spaces (properly quoted)
PROGRAM_FILES="C:\\Program Files"
PROGRAM_FILES_X86="C:\\Program Files (x86)"
DOCUMENTS_DIR="~/Documents/My Projects"

# Values with single quotes
MESSAGE_WITH_QUOTES="It's a beautiful day"
SQL_QUERY="SELECT * FROM users WHERE name = 'John'"

# Values with double quotes
JSON_CONFIG="{\"debug\": true, \"port\": 3000}"
COMMAND_WITH_QUOTES="echo \"Hello World\""

# Values with both single and double quotes
COMPLEX_MESSAGE="He said \"It's working!\" with excitement"

# Values with backslashes (important for Windows paths and regex)
WINDOWS_PATH="C:\\Users\\Developer\\AppData\\Local"
REGEX_PATTERN="\\d{4}-\\d{2}-\\d{2}"

# Values with environment variable expansion
LOG_FILE="$HOME/logs/app-$(date +%Y%m%d).log"
LOG_FILE_WIN="%USERPROFILE%\\logs\\app-%date:~-4,4%%date:~-10,2%%date:~-7,2%.log"

# =============================================================================
# UNICODE AND INTERNATIONAL CHARACTERS
# =============================================================================

# Unicode characters in values
WELCOME_MESSAGE="Welcome! Ê¨¢Ëøé! Bienvenidos! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
EMOJI_STATUS="‚úÖ Ready to go! üöÄ"
CURRENCY_SYMBOLS="Supported: $ ‚Ç¨ ¬£ ¬• ‚Çπ ‚ÇΩ"

# International paths
DOCUMENTS_INTL="~/Documents/ÊñáÊ°£"
PROJECTS_INTL="~/Projets/È°πÁõÆ"

# =============================================================================
# SHELL-SPECIFIC ENVIRONMENT VARIABLES
# =============================================================================

# Bash-specific settings
HISTSIZE_BASH=10000
HISTFILESIZE_BASH=20000
HISTCONTROL_BASH=ignoredups:erasedups

# Zsh-specific settings
HISTSIZE_ZSH=10000
SAVEHIST_ZSH=10000
HIST_STAMPS_ZSH="yyyy-mm-dd"

# Fish-specific settings
FISH_GREETING_FISH="Welcome to Fish Shell!"
FISH_TERM24BIT_FISH=1

# Nushell-specific settings
NU_CONFIG_DIR_NU=~/.config/nushell
NU_PLUGIN_DIRS_NU=~/.config/nushell/plugins

# PowerShell-specific settings
POWERSHELL_TELEMETRY_OPTOUT_PS=1
DOTNET_CLI_TELEMETRY_OPTOUT_PS=1

# =============================================================================
# CONDITIONAL ENVIRONMENT VARIABLES - Based on available tools
# =============================================================================

# Use different pagers based on availability
PAGER_PREFERRED=bat
PAGER_FALLBACK=less
PAGER_BASIC=more

# Different terminal multiplexers
TERMINAL_MULTIPLEXER=tmux
TERMINAL_MULTIPLEXER_FALLBACK=screen

# =============================================================================
# HIERARCHICAL LOADING EXAMPLES
# =============================================================================

# These variables demonstrate how hierarchical loading works:
# 
# In $HOME/.env (lowest priority):
# PROJECT_TYPE=personal
# DEBUG_LEVEL=info
# 
# In $HOME/.confs/.env (medium priority):
# PROJECT_TYPE=work
# LOG_LEVEL=warn
# 
# In $PWD/.env (highest priority):
# DEBUG_LEVEL=debug
# ENVIRONMENT=development
#
# Final result:
# PROJECT_TYPE=work (from .confs)
# DEBUG_LEVEL=debug (from PWD)
# LOG_LEVEL=warn (from .confs)
# ENVIRONMENT=development (from PWD)

# Global defaults (typically in $HOME/.env)
PROJECT_TYPE=personal
DEBUG_LEVEL=info
LOG_LEVEL=info
ENVIRONMENT=production

# Work-specific overrides (typically in $HOME/.confs/.env)
PROJECT_TYPE_WORK=work
DEBUG_LEVEL_WORK=warn
COMPANY_DOMAIN=company.com

# Project-specific overrides (typically in $PWD/.env)
ENVIRONMENT_DEV=development
DEBUG_LEVEL_DEV=debug
DATABASE_URL_DEV=postgresql://localhost:5432/myapp_dev

# =============================================================================
# SECURITY CONSIDERATIONS - Examples of safe practices
# =============================================================================

# ‚úÖ GOOD: Use placeholder values for sensitive data
SECRET_KEY=change_me_in_production
DATABASE_PASSWORD=your_secure_password_here
API_TOKEN=replace_with_actual_token

# ‚úÖ GOOD: Separate development and production configs
DB_HOST_DEV=localhost
DB_HOST_PROD=prod-db.company.com

# ‚úÖ GOOD: Use environment-specific suffixes for sensitive data
STRIPE_KEY_DEV=sk_test_your_test_key
STRIPE_KEY_PROD=sk_live_your_live_key

# =============================================================================
# PERFORMANCE AND OPTIMIZATION SETTINGS
# =============================================================================

# Memory settings for different applications
JAVA_OPTS="-Xmx2g -Xms1g"
NODE_OPTIONS="--max-old-space-size=4096"
PYTHON_OPTIMIZE=1

# Parallel processing
MAKEFLAGS="-j$(nproc)"
MAKEFLAGS_MACOS="-j$(sysctl -n hw.ncpu)"
MAKEFLAGS_WIN="-j%NUMBER_OF_PROCESSORS%"

# =============================================================================
# TESTING AND DEBUGGING VARIABLES
# =============================================================================

# Test environment indicators
TEST_ENV=true
TESTING_MODE=enabled
MOCK_EXTERNAL_APIS=true

# Debug flags
DEBUG=myapp:*
VERBOSE=true
TRACE_ENABLED=false

# Logging configuration
LOG_FORMAT=json
LOG_TIMESTAMP=true
LOG_COLOR=auto

# =============================================================================
# EXAMPLES OF WHAT NOT TO DO - Common mistakes
# =============================================================================

# ‚ùå WRONG: Spaces around equals sign
# BAD_VAR = "value"

# ‚ùå WRONG: Unquoted values with spaces
# BAD_PATH = /path/with spaces/file

# ‚ùå WRONG: Unescaped quotes
# BAD_QUOTES = "He said "Hello""

# ‚ùå WRONG: Shell-specific syntax without suffix
# BAD_EXPANSION = $(date)

# ‚ùå WRONG: Hardcoded absolute paths that won't work cross-platform
# BAD_ABSOLUTE = /usr/local/bin/myapp

# ‚úÖ CORRECT: Proper quoting and platform-specific handling
GOOD_PATH="/path/with spaces/file"
GOOD_QUOTES="He said \"Hello\""
GOOD_EXPANSION_BASH="$(date)"
GOOD_EXPANSION_PS="$(Get-Date)"
GOOD_RELATIVE="./bin/myapp"

# =============================================================================
# TESTING YOUR ENVIRONMENT VARIABLES
# =============================================================================

# Test variables to verify the system works correctly
TEST_BASIC=basic_value_works
TEST_QUOTED="value with spaces works"
TEST_PLATFORM_UNIX=unix_detected
TEST_PLATFORM_WIN=windows_detected
TEST_SHELL_BASH=bash_detected
TEST_SHELL_ZSH=zsh_detected
TEST_SHELL_FISH=fish_detected
TEST_SHELL_NU=nushell_detected
TEST_SHELL_PS=powershell_detected

# Hierarchical loading test variables
HIERARCHY_TEST_GLOBAL=from_global_env
HIERARCHY_TEST_USER=from_user_confs
HIERARCHY_TEST_PROJECT=from_project_env

# Special character test variables
SPECIAL_CHARS_TEST="!@#$%^&*()_+-=[]{}|;:,.<>?"
UNICODE_TEST="Testing: Œ±Œ≤Œ≥ ‰∏≠Êñá ÿßŸÑÿπÿ±ÿ®Ÿäÿ© —Ä—É—Å—Å–∫–∏–π üéâ"
PATH_TEST="/usr/local/bin:/opt/bin:~/.local/bin"