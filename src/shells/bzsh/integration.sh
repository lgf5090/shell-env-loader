#!/bin/bash
# Bash/Zsh Integration Script
# ============================
# Integration code for adding the environment loader to bash and zsh configuration

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Integration code template for .bashrc/.zshrc
BZSH_INTEGRATION_CODE='
# Cross-Shell Environment Loader (Bash/Zsh Compatible)
# ====================================================
# Automatically load environment variables from .env files
# Generated by shell-env-loader installation

if [ -f "$HOME/.local/share/env-loader/bzsh/loader.sh" ]; then
    # Source the loader
    . "$HOME/.local/share/env-loader/bzsh/loader.sh"

    # Optional: Enable debug mode by uncommenting the next line
    # export ENV_LOADER_DEBUG=true
fi
'

# Function to get shell configuration file paths
# Usage: get_shell_config_files [bash|zsh|all]
get_shell_config_files() {
    local shell_type="${1:-all}"
    local config_files=""

    case "$shell_type" in
        bash)
            # Bash configuration files in order of preference
            for file in "$HOME/.bashrc" "$HOME/.bash_profile" "$HOME/.profile"; do
                if [ -f "$file" ]; then
                    echo "$file"
                    return 0
                fi
            done
            # Default to .bashrc
            echo "$HOME/.bashrc"
            ;;
        zsh)
            # Zsh configuration files in order of preference
            for file in "$HOME/.zshrc" "$HOME/.zsh_profile" "$HOME/.profile"; do
                if [ -f "$file" ]; then
                    echo "$file"
                    return 0
                fi
            done
            # Default to .zshrc
            echo "$HOME/.zshrc"
            ;;
        all|*)
            # Return all existing config files
            for file in "$HOME/.bashrc" "$HOME/.bash_profile" "$HOME/.zshrc" "$HOME/.zsh_profile" "$HOME/.profile"; do
                if [ -f "$file" ]; then
                    config_files="$config_files $file"
                fi
            done
            if [ -n "$config_files" ]; then
                echo "$config_files"
            else
                echo "$HOME/.bashrc $HOME/.zshrc"
            fi
            ;;
    esac
}

# Function to check if integration is already installed
is_integration_installed() {
    local config_file="$1"

    if [ -f "$config_file" ]; then
        grep -q "Cross-Shell Environment Loader.*Bash/Zsh Compatible" "$config_file"
    else
        return 1
    fi
}

# Function to install bash/zsh integration
install_bzsh_integration() {
    local shell_type="${1:-all}"
    local config_files
    local config_file
    local backup_file
    local installed_count=0

    echo "Installing Bash/Zsh compatible integration..."

    if [ "$shell_type" = "all" ]; then
        # Install for both bash and zsh if they exist
        config_files=$(get_shell_config_files all)
    else
        config_files=$(get_shell_config_files "$shell_type")
    fi

    for config_file in $config_files; do
        echo "Processing: $config_file"

        # Check if already installed
        if is_integration_installed "$config_file"; then
            echo "  Integration already installed in $config_file"
            continue
        fi

        # Create backup if file exists
        if [ -f "$config_file" ]; then
            backup_file="${config_file}.env-loader-backup.$(date +%Y%m%d_%H%M%S)"
            cp "$config_file" "$backup_file"
            echo "  Created backup: $backup_file"
        fi

        # Add integration code
        echo "$BZSH_INTEGRATION_CODE" >> "$config_file"
        echo "  ✅ Integration installed in $config_file"
        ((installed_count++))
    done

    if [ $installed_count -gt 0 ]; then
        echo "✅ Bash/Zsh integration installed successfully in $installed_count file(s)"
        echo "   To activate: source the configuration file(s) or start a new shell session"
    else
        echo "ℹ️  No new installations needed"
    fi

    return 0
}

# Function to uninstall bash integration
uninstall_bash_integration() {
    local config_file
    local temp_file
    
    config_file=$(get_bash_config_file)
    
    echo "Uninstalling Bash integration..."
    
    if ! is_integration_installed "$config_file"; then
        echo "Integration not found in $config_file"
        return 1
    fi
    
    # Create temporary file without integration code
    temp_file=$(mktemp)
    
    # Remove integration block
    awk '
        /^# Cross-Shell Environment Loader \(Bash\)/ { skip = 1 }
        /^fi$/ && skip { skip = 0; next }
        !skip { print }
    ' "$config_file" > "$temp_file"
    
    # Replace original file
    mv "$temp_file" "$config_file"
    
    echo "✅ Bash integration uninstalled successfully"
    return 0
}

# Function to verify bash integration
verify_bash_integration() {
    local config_file
    local loader_path
    
    config_file=$(get_bash_config_file)
    loader_path="$HOME/.local/share/env-loader/bash/loader.sh"
    
    echo "Verifying Bash integration..."
    echo "Configuration file: $config_file"
    echo "Loader script: $loader_path"
    
    # Check if integration is installed
    if ! is_integration_installed "$config_file"; then
        echo "❌ Integration not found in configuration file"
        return 1
    fi
    
    # Check if loader script exists
    if [ ! -f "$loader_path" ]; then
        echo "❌ Loader script not found: $loader_path"
        return 1
    fi
    
    # Test loading the script
    if bash -c ". '$loader_path' && echo 'Loader script loaded successfully'" >/dev/null 2>&1; then
        echo "✅ Loader script loads without errors"
    else
        echo "❌ Loader script has errors"
        return 1
    fi
    
    echo "✅ Bash integration verification passed"
    return 0
}

# Function to show integration status
show_integration_status() {
    local config_file
    local loader_path
    
    config_file=$(get_bash_config_file)
    loader_path="$HOME/.local/share/env-loader/bash/loader.sh"
    
    echo "Bash Integration Status"
    echo "======================="
    echo "Configuration file: $config_file"
    echo "Configuration file exists: $([ -f "$config_file" ] && echo "yes" || echo "no")"
    echo "Integration installed: $(is_integration_installed "$config_file" && echo "yes" || echo "no")"
    echo "Loader script: $loader_path"
    echo "Loader script exists: $([ -f "$loader_path" ] && echo "yes" || echo "no")"
    
    if [ -f "$config_file" ]; then
        echo "Configuration file size: $(wc -c < "$config_file") bytes"
    fi
    
    if [ -f "$loader_path" ]; then
        echo "Loader script size: $(wc -c < "$loader_path") bytes"
    fi
}

# Function to test integration in a new bash session
test_integration() {
    local config_file
    
    config_file=$(get_bash_config_file)
    
    echo "Testing Bash integration in new session..."
    
    # Test in a new bash session
    bash -c "
        source '$config_file'
        if command -v show_env_status >/dev/null 2>&1; then
            echo '✅ Integration test passed - functions are available'
            show_env_status
        else
            echo '❌ Integration test failed - functions not available'
            exit 1
        fi
    "
}

# Main function for command-line usage
main() {
    local shell_type="${2:-all}"

    case "${1:-}" in
        install)
            install_bzsh_integration "$shell_type"
            ;;
        uninstall)
            echo "Uninstall functionality needs to be updated for bzsh"
            exit 1
            ;;
        verify)
            echo "Verify functionality needs to be updated for bzsh"
            exit 1
            ;;
        status)
            echo "Status functionality needs to be updated for bzsh"
            exit 1
            ;;
        test)
            echo "Test functionality needs to be updated for bzsh"
            exit 1
            ;;
        *)
            echo "Usage: $0 {install} [bash|zsh|all]"
            echo
            echo "Commands:"
            echo "  install [shell] - Install Bash/Zsh compatible integration"
            echo "                   shell: bash, zsh, or all (default: all)"
            echo
            echo "Examples:"
            echo "  $0 install        # Install for both bash and zsh"
            echo "  $0 install bash   # Install only for bash"
            echo "  $0 install zsh    # Install only for zsh"
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi
