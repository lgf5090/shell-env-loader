# PowerShell Integration Script
# ============================
# Integration code for adding the environment loader to PowerShell profile

# Get the directory of this script
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path

# Integration code template for PowerShell profile
$PowerShellIntegrationCode = @'
# Cross-Shell Environment Loader (PowerShell)
# ============================================
# Automatically load environment variables from .env files
# Generated by shell-env-loader installation

$EnvLoaderPath = "$HOME/.local/share/env-loader/pwsh/loader.ps1"
if (Test-Path $EnvLoaderPath) {
    # Import the loader module
    . $EnvLoaderPath
    
    # Optional: Enable debug mode by uncommenting the next line
    # $env:ENV_LOADER_DEBUG = "true"
    
    # Load environment variables from default hierarchy
    # Import-EnvFile ".env"
}
'@

# Function to get PowerShell profile path
function Get-PowerShellProfilePath {
    # PowerShell profile paths vary by host and scope
    # We'll use the CurrentUserCurrentHost profile (most common)
    return $PROFILE.CurrentUserCurrentHost
}

# Function to check if integration is already installed
function Test-IntegrationInstalled {
    param([string]$ProfilePath)
    
    if (Test-Path $ProfilePath) {
        $content = Get-Content $ProfilePath -Raw -ErrorAction SilentlyContinue
        return $content -match "Cross-Shell Environment Loader \(PowerShell\)"
    }
    return $false
}

# Function to install PowerShell integration
function Install-PowerShellIntegration {
    $profilePath = Get-PowerShellProfilePath
    $profileDir = Split-Path -Parent $profilePath
    
    Write-Host "Installing PowerShell integration..." -ForegroundColor Cyan
    Write-Host "Profile file: $profilePath" -ForegroundColor White
    
    # Check if already installed
    if (Test-IntegrationInstalled $profilePath) {
        Write-Host "Integration already installed in $profilePath" -ForegroundColor Yellow
        return
    }
    
    # Create profile directory if it doesn't exist
    if (-not (Test-Path $profileDir)) {
        New-Item -ItemType Directory -Path $profileDir -Force | Out-Null
        Write-Host "Created profile directory: $profileDir" -ForegroundColor Green
    }
    
    # Create backup if file exists
    if (Test-Path $profilePath) {
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        $backupPath = "$profilePath.env-loader-backup.$timestamp"
        Copy-Item $profilePath $backupPath
        Write-Host "Created backup: $backupPath" -ForegroundColor Green
    }
    
    # Add integration code
    Add-Content -Path $profilePath -Value $PowerShellIntegrationCode
    
    Write-Host "✅ PowerShell integration installed successfully" -ForegroundColor Green
    Write-Host "   Profile file: $profilePath" -ForegroundColor White
    Write-Host "   To activate: . `"$profilePath`"" -ForegroundColor White
    Write-Host "   Or start a new PowerShell session" -ForegroundColor White
}

# Function to uninstall PowerShell integration
function Uninstall-PowerShellIntegration {
    $profilePath = Get-PowerShellProfilePath
    
    Write-Host "Uninstalling PowerShell integration..." -ForegroundColor Cyan
    
    if (-not (Test-IntegrationInstalled $profilePath)) {
        Write-Host "Integration not found in $profilePath" -ForegroundColor Yellow
        return
    }
    
    # Read current content
    $content = Get-Content $profilePath -Raw -ErrorAction SilentlyContinue
    
    # Remove integration block using regex
    $pattern = '(?s)# Cross-Shell Environment Loader \(PowerShell\).*?# Import-EnvFile "\.env"\s*}'
    $newContent = $content -replace $pattern, ''
    
    # Write back to file
    Set-Content -Path $profilePath -Value $newContent.Trim()
    
    Write-Host "✅ PowerShell integration uninstalled successfully" -ForegroundColor Green
}

# Function to verify PowerShell integration
function Test-PowerShellIntegration {
    $profilePath = Get-PowerShellProfilePath
    $loaderPath = "$HOME/.local/share/env-loader/pwsh/loader.ps1"
    
    Write-Host "Verifying PowerShell integration..." -ForegroundColor Cyan
    Write-Host "Profile file: $profilePath" -ForegroundColor White
    Write-Host "Loader script: $loaderPath" -ForegroundColor White
    
    # Check if integration is installed
    if (-not (Test-IntegrationInstalled $profilePath)) {
        Write-Host "❌ Integration not found in profile file" -ForegroundColor Red
        return $false
    }
    
    # Check if loader script exists
    if (-not (Test-Path $loaderPath)) {
        Write-Host "❌ Loader script not found: $loaderPath" -ForegroundColor Red
        return $false
    }
    
    # Test loading the script
    try {
        . $loaderPath
        Write-Host "✅ Loader script loads without errors" -ForegroundColor Green
    } catch {
        Write-Host "❌ Loader script has errors: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
    
    Write-Host "✅ PowerShell integration verification passed" -ForegroundColor Green
    return $true
}

# Function to show integration status
function Show-IntegrationStatus {
    $profilePath = Get-PowerShellProfilePath
    $loaderPath = "$HOME/.local/share/env-loader/pwsh/loader.ps1"
    
    Write-Host "PowerShell Integration Status" -ForegroundColor Cyan
    Write-Host "=============================" -ForegroundColor Cyan
    Write-Host "Profile file: $profilePath" -ForegroundColor White
    Write-Host "Profile file exists: $(Test-Path $profilePath)" -ForegroundColor White
    Write-Host "Integration installed: $(Test-IntegrationInstalled $profilePath)" -ForegroundColor White
    Write-Host "Loader script: $loaderPath" -ForegroundColor White
    Write-Host "Loader script exists: $(Test-Path $loaderPath)" -ForegroundColor White
    
    if (Test-Path $profilePath) {
        $size = (Get-Item $profilePath).Length
        Write-Host "Profile file size: $size bytes" -ForegroundColor White
    }
    
    if (Test-Path $loaderPath) {
        $size = (Get-Item $loaderPath).Length
        Write-Host "Loader script size: $size bytes" -ForegroundColor White
    }
}

# Function to test integration in a new PowerShell session
function Test-IntegrationInNewSession {
    $profilePath = Get-PowerShellProfilePath
    
    Write-Host "Testing PowerShell integration in new session..." -ForegroundColor Cyan
    
    # Test in a new PowerShell session
    $testScript = @"
. '$profilePath'
if (Get-Command Import-EnvFile -ErrorAction SilentlyContinue) {
    Write-Host '✅ Integration test passed - functions are available' -ForegroundColor Green
    Get-Platform
    Get-Shell
} else {
    Write-Host '❌ Integration test failed - functions not available' -ForegroundColor Red
    exit 1
}
"@
    
    $result = pwsh -NoProfile -Command $testScript
    Write-Host $result
}

# Main function for command-line usage
function Main {
    param([string]$Command)
    
    switch ($Command.ToLower()) {
        "install" { Install-PowerShellIntegration }
        "uninstall" { Uninstall-PowerShellIntegration }
        "verify" { Test-PowerShellIntegration }
        "status" { Show-IntegrationStatus }
        "test" { Test-IntegrationInNewSession }
        default {
            Write-Host "Usage: pwsh integration.ps1 {install|uninstall|verify|status|test}" -ForegroundColor Yellow
            Write-Host ""
            Write-Host "Commands:" -ForegroundColor White
            Write-Host "  install   - Install PowerShell integration" -ForegroundColor White
            Write-Host "  uninstall - Remove PowerShell integration" -ForegroundColor White
            Write-Host "  verify    - Verify integration is working" -ForegroundColor White
            Write-Host "  status    - Show integration status" -ForegroundColor White
            Write-Host "  test      - Test integration in new session" -ForegroundColor White
            return 1
        }
    }
    return 0
}

# Run main function if script is executed directly
if ($MyInvocation.InvocationName -ne '.') {
    $exitCode = Main $args[0]
    exit $exitCode
}

# Export functions for module usage
Export-ModuleMember -Function Install-PowerShellIntegration, Uninstall-PowerShellIntegration, Test-PowerShellIntegration, Show-IntegrationStatus
