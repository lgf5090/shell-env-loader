#!/bin/zsh
# Zsh Integration Script
# =======================
# Integration code for adding the environment loader to zsh configuration

# Get the directory of this script
SCRIPT_DIR="${0:A:h}"

# Integration code template for .zshrc
ZSH_INTEGRATION_CODE='
# Cross-Shell Environment Loader (Zsh)
# =====================================
# Automatically load environment variables from .env files
# Generated by shell-env-loader installation

if [[ -f "$HOME/.local/share/env-loader/zsh/loader.zsh" ]]; then
    # Source the loader
    source "$HOME/.local/share/env-loader/zsh/loader.zsh"
    
    # Optional: Enable debug mode by uncommenting the next line
    # export ENV_LOADER_DEBUG=true
fi
'

# Function to get zsh configuration file path
get_zsh_config_file() {
    # Check for .zshrc first (most common)
    if [[ -f "$HOME/.zshrc" ]]; then
        print "$HOME/.zshrc"
        return 0
    fi
    
    # Check for .zsh_profile
    if [[ -f "$HOME/.zsh_profile" ]]; then
        print "$HOME/.zsh_profile"
        return 0
    fi
    
    # Check for .profile
    if [[ -f "$HOME/.profile" ]]; then
        print "$HOME/.profile"
        return 0
    fi
    
    # Default to .zshrc (will be created)
    print "$HOME/.zshrc"
}

# Function to check if integration is already installed
is_integration_installed() {
    local config_file="$1"
    
    if [[ -f "$config_file" ]]; then
        grep -q "Cross-Shell Environment Loader (Zsh)" "$config_file"
    else
        return 1
    fi
}

# Function to install zsh integration
install_zsh_integration() {
    local config_file
    local backup_file
    
    config_file=$(get_zsh_config_file)
    
    echo "Installing Zsh integration..."
    echo "Configuration file: $config_file"
    
    # Check if already installed
    if is_integration_installed "$config_file"; then
        echo "Integration already installed in $config_file"
        return 0
    fi
    
    # Create backup if file exists
    if [[ -f "$config_file" ]]; then
        backup_file="${config_file}.env-loader-backup.$(date +%Y%m%d_%H%M%S)"
        cp "$config_file" "$backup_file"
        echo "Created backup: $backup_file"
    fi
    
    # Add integration code
    print "$ZSH_INTEGRATION_CODE" >> "$config_file"
    
    echo "✅ Zsh integration installed successfully"
    echo "   Configuration file: $config_file"
    echo "   To activate: source $config_file"
    echo "   Or start a new zsh session"
    
    return 0
}

# Function to uninstall zsh integration
uninstall_zsh_integration() {
    local config_file
    local temp_file
    
    config_file=$(get_zsh_config_file)
    
    echo "Uninstalling Zsh integration..."
    
    if ! is_integration_installed "$config_file"; then
        echo "Integration not found in $config_file"
        return 1
    fi
    
    # Create temporary file without integration code
    temp_file=$(mktemp)
    
    # Remove integration block
    awk '
        /^# Cross-Shell Environment Loader \(Zsh\)/ { skip = 1 }
        /^fi$/ && skip { skip = 0; next }
        !skip { print }
    ' "$config_file" > "$temp_file"
    
    # Replace original file
    mv "$temp_file" "$config_file"
    
    echo "✅ Zsh integration uninstalled successfully"
    return 0
}

# Function to verify zsh integration
verify_zsh_integration() {
    local config_file
    local loader_path
    
    config_file=$(get_zsh_config_file)
    loader_path="$HOME/.local/share/env-loader/zsh/loader.zsh"
    
    echo "Verifying Zsh integration..."
    echo "Configuration file: $config_file"
    echo "Loader script: $loader_path"
    
    # Check if integration is installed
    if ! is_integration_installed "$config_file"; then
        echo "❌ Integration not found in configuration file"
        return 1
    fi
    
    # Check if loader script exists
    if [[ ! -f "$loader_path" ]]; then
        echo "❌ Loader script not found: $loader_path"
        return 1
    fi
    
    # Test loading the script
    if zsh -c "source '$loader_path' && echo 'Loader script loaded successfully'" >/dev/null 2>&1; then
        echo "✅ Loader script loads without errors"
    else
        echo "❌ Loader script has errors"
        return 1
    fi
    
    echo "✅ Zsh integration verification passed"
    return 0
}

# Function to show integration status
show_integration_status() {
    local config_file
    local loader_path
    
    config_file=$(get_zsh_config_file)
    loader_path="$HOME/.local/share/env-loader/zsh/loader.zsh"
    
    echo "Zsh Integration Status"
    echo "======================"
    echo "Configuration file: $config_file"
    echo "Configuration file exists: $([[ -f "$config_file" ]] && echo "yes" || echo "no")"
    echo "Integration installed: $(is_integration_installed "$config_file" && echo "yes" || echo "no")"
    echo "Loader script: $loader_path"
    echo "Loader script exists: $([[ -f "$loader_path" ]] && echo "yes" || echo "no")"
    
    if [[ -f "$config_file" ]]; then
        echo "Configuration file size: $(wc -c < "$config_file") bytes"
    fi
    
    if [[ -f "$loader_path" ]]; then
        echo "Loader script size: $(wc -c < "$loader_path") bytes"
    fi
}

# Function to test integration in a new zsh session
test_integration() {
    local config_file
    
    config_file=$(get_zsh_config_file)
    
    echo "Testing Zsh integration in new session..."
    
    # Test in a new zsh session
    zsh -c "
        source '$config_file'
        if command -v show_env_status >/dev/null 2>&1; then
            echo '✅ Integration test passed - functions are available'
            show_env_status
        else
            echo '❌ Integration test failed - functions not available'
            exit 1
        fi
    "
}

# Main function for command-line usage
main() {
    case "${1:-}" in
        install)
            install_zsh_integration
            ;;
        uninstall)
            uninstall_zsh_integration
            ;;
        verify)
            verify_zsh_integration
            ;;
        status)
            show_integration_status
            ;;
        test)
            test_integration
            ;;
        *)
            echo "Usage: $0 {install|uninstall|verify|status|test}"
            echo
            echo "Commands:"
            echo "  install   - Install Zsh integration"
            echo "  uninstall - Remove Zsh integration"
            echo "  verify    - Verify integration is working"
            echo "  status    - Show integration status"
            echo "  test      - Test integration in new session"
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [[ "${(%):-%x}" == "${(%):-%N}" ]]; then
    main "$@"
fi
